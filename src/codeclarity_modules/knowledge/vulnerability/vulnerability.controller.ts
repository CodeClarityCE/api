import { Controller, Get, Query, DefaultValuePipe, ParseIntPipe } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiQuery, ApiResponse } from '@nestjs/swagger';
import { VulnerabilitySearchService, VulnerabilitySearchResult } from './vulnerability.service';
import { TypedPaginatedResponse } from 'src/types/apiResponses.types';
import { NonAuthEndpoint } from 'src/decorators/SkipAuthDecorator';

@ApiTags('Knowledge - Vulnerabilities')
@Controller('knowledge/vulnerabilities')
export class VulnerabilityController {
    constructor(private readonly vulnerabilitySearchService: VulnerabilitySearchService) {}

    @Get('search')
    @NonAuthEndpoint()
    @ApiOperation({
        summary: 'Search vulnerabilities by CVE ID, aliases, or description',
        description:
            'Search the knowledge database for vulnerabilities matching the given query. Supports searching by CVE IDs, aliases, and descriptions.'
    })
    @ApiQuery({
        name: 'query',
        description: 'Search term (CVE ID, alias, or text)',
        required: true
    })
    @ApiQuery({ name: 'page', required: false, description: 'Page number (0-based)', type: Number })
    @ApiQuery({
        name: 'limit',
        required: false,
        description: 'Number of results per page (max 100)',
        type: Number
    })
    @ApiQuery({
        name: 'source',
        required: false,
        enum: ['NVD', 'OSV', 'ALL'],
        description: 'Vulnerability data source to search',
        type: String
    })
    @ApiResponse({
        status: 200,
        description: 'Vulnerability search results',
        schema: {
            type: 'object',
            properties: {
                data: {
                    type: 'array',
                    items: {
                        type: 'object',
                        properties: {
                            id: { type: 'string', description: 'Vulnerability ID (CVE)' },
                            aliases: {
                                type: 'array',
                                items: { type: 'string' },
                                description: 'Alternative identifiers'
                            },
                            description: {
                                type: 'string',
                                description: 'Vulnerability description'
                            },
                            severity: {
                                type: 'string',
                                enum: ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW', 'NONE'],
                                description: 'Severity level'
                            },
                            published_date: { type: 'string', description: 'Publication date' },
                            source: {
                                type: 'string',
                                enum: ['NVD', 'OSV'],
                                description: 'Data source'
                            }
                        }
                    }
                },
                page: { type: 'number', description: 'Current page number' },
                entry_count: { type: 'number', description: 'Number of entries in current page' },
                entries_per_page: { type: 'number', description: 'Maximum entries per page' },
                total_entries: { type: 'number', description: 'Total number of matching entries' },
                total_pages: { type: 'number', description: 'Total number of pages' },
                matching_count: { type: 'number', description: 'Total matching entries' }
            }
        }
    })
    @ApiResponse({ status: 400, description: 'Bad request - missing or invalid query parameters' })
    async searchVulnerabilities(
        @Query('query') query: string,
        @Query('page', new DefaultValuePipe(0), ParseIntPipe) page?: number,
        @Query('limit', new DefaultValuePipe(20), ParseIntPipe) limit?: number,
        @Query('source', new DefaultValuePipe('ALL')) source?: 'NVD' | 'OSV' | 'ALL'
    ): Promise<TypedPaginatedResponse<VulnerabilitySearchResult>> {
        if (!query || query.trim().length === 0) {
            throw new Error('Query parameter is required');
        }

        return await this.vulnerabilitySearchService.searchVulnerabilities({
            query: query.trim(),
            page: Math.max(0, page || 0),
            limit: Math.min(Math.max(1, limit || 20), 100),
            source: source || 'ALL'
        });
    }
}
