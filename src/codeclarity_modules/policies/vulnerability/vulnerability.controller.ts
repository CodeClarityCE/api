import {
    Body,
    Controller,
    DefaultValuePipe,
    Delete,
    Get,
    Param,
    ParseIntPipe,
    Patch,
    Post,
    Query
} from '@nestjs/common';
import { AuthUser } from 'src/decorators/UserDecorator';
import { VulnerabilityPolicyService } from './vulnerability.service';
import { AuthenticatedUser } from 'src/base_modules/auth/auth.types';
import {
    CreatedResponse,
    NoDataResponse,
    TypedPaginatedResponse,
    TypedResponse
} from 'src/types/apiResponses.types';
import {
    VulnerabilityPolicyCreateBody,
    VulnerabilityPolicyPatchBody
} from 'src/codeclarity_modules/policies/vulnerability/vulnerabilityPolicy.types';
import { PolicyFrontend } from 'src/codeclarity_modules/policies/policy.entity';
import { SortDirection } from 'src/types/sort.types';
import { ApiTags, ApiOperation, ApiParam, ApiQuery, ApiResponse } from '@nestjs/swagger';

@ApiTags('Vulnerability Policies')
@Controller('org/:org_id/policies/vulnerability_policy')
export class VulnerabilityPolicyController {
    constructor(private readonly vulnerabilityPolicyService: VulnerabilityPolicyService) {}

    @Post('')
    @ApiOperation({ summary: 'Create a new vulnerability policy' })
    @ApiParam({ name: 'org_id', description: 'Organization ID' })
    @ApiResponse({ status: 201, description: 'Policy created successfully' })
    @ApiResponse({ status: 403, description: 'Insufficient permissions' })
    @ApiResponse({ status: 404, description: 'Organization not found' })
    async create(
        @AuthUser() user: AuthenticatedUser,
        @Param('org_id') org_id: string,
        @Body() createBody: VulnerabilityPolicyCreateBody
    ): Promise<CreatedResponse> {
        const id = await this.vulnerabilityPolicyService.create(org_id, createBody, user);
        return { id };
    }

    @Get(':policy_id')
    @ApiOperation({ summary: 'Get a vulnerability policy by ID' })
    @ApiParam({ name: 'org_id', description: 'Organization ID' })
    @ApiParam({ name: 'policy_id', description: 'Policy ID' })
    @ApiResponse({ status: 200, description: 'Policy retrieved successfully' })
    @ApiResponse({ status: 404, description: 'Policy not found' })
    async get(
        @AuthUser() user: AuthenticatedUser,
        @Param('org_id') org_id: string,
        @Param('policy_id') policy_id: string
    ): Promise<TypedResponse<PolicyFrontend>> {
        const policy = await this.vulnerabilityPolicyService.get(org_id, policy_id, user);

        // Map to frontend-compatible format
        const policyFrontend: PolicyFrontend = {
            id: policy.id,
            name: policy.name,
            description: policy.description,
            default: policy.default,
            content: policy.content,
            created_on: policy.created_on,
            created_by: policy.created_by?.email || '',
            policy_type: policy.policy_type
        };

        return { data: policyFrontend };
    }

    @Get('')
    @ApiOperation({ summary: 'Get all vulnerability policies for an organization' })
    @ApiParam({ name: 'org_id', description: 'Organization ID' })
    @ApiQuery({ name: 'page', required: false, description: 'Page number (0-based)' })
    @ApiQuery({
        name: 'entries_per_page',
        required: false,
        description: 'Number of entries per page'
    })
    @ApiQuery({ name: 'search_key', required: false, description: 'Search term for filtering' })
    @ApiQuery({ name: 'sort_by', required: false, description: 'Field to sort by' })
    @ApiQuery({
        name: 'sort_direction',
        required: false,
        enum: SortDirection,
        description: 'Sort direction'
    })
    @ApiResponse({ status: 200, description: 'Policies retrieved successfully' })
    async getMany(
        @AuthUser() user: AuthenticatedUser,
        @Param('org_id') org_id: string,
        @Query('page', new DefaultValuePipe(0), ParseIntPipe) page?: number,
        @Query('entries_per_page', new DefaultValuePipe(0), ParseIntPipe) entries_per_page?: number,
        @Query('search_key') search_key?: string,
        @Query('sort_by') sort_by?: string,
        @Query('sort_direction') sort_direction?: SortDirection
    ): Promise<TypedPaginatedResponse<PolicyFrontend>> {
        return await this.vulnerabilityPolicyService.getMany(
            org_id,
            { currentPage: page, entriesPerPage: entries_per_page },
            user,
            search_key,
            sort_by,
            sort_direction
        );
    }

    @Patch(':policy_id')
    @ApiOperation({ summary: 'Update a vulnerability policy' })
    @ApiParam({ name: 'org_id', description: 'Organization ID' })
    @ApiParam({ name: 'policy_id', description: 'Policy ID' })
    @ApiResponse({ status: 200, description: 'Policy updated successfully' })
    @ApiResponse({ status: 403, description: 'Insufficient permissions' })
    @ApiResponse({ status: 404, description: 'Policy not found' })
    async update(
        @AuthUser() user: AuthenticatedUser,
        @Param('org_id') org_id: string,
        @Param('policy_id') policy_id: string,
        @Body() vulnerabilityPolicyPatchBody: VulnerabilityPolicyPatchBody
    ): Promise<NoDataResponse> {
        await this.vulnerabilityPolicyService.update(
            org_id,
            policy_id,
            vulnerabilityPolicyPatchBody,
            user
        );
        return {};
    }

    @Delete(':policy_id')
    @ApiOperation({ summary: 'Delete a vulnerability policy' })
    @ApiParam({ name: 'org_id', description: 'Organization ID' })
    @ApiParam({ name: 'policy_id', description: 'Policy ID' })
    @ApiResponse({ status: 200, description: 'Policy deleted successfully' })
    @ApiResponse({ status: 403, description: 'Insufficient permissions' })
    @ApiResponse({ status: 404, description: 'Policy not found' })
    async remove(
        @AuthUser() user: AuthenticatedUser,
        @Param('org_id') org_id: string,
        @Param('policy_id') policy_id: string
    ): Promise<NoDataResponse> {
        await this.vulnerabilityPolicyService.remove(org_id, policy_id, user);
        return {};
    }
}
